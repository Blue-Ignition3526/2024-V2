package frc.robot;

import frc.robot.commands.SwerveDrive.DriveSwerve;
import frc.robot.speedAlterators.AlignToSpeaker;
import frc.robot.subsystems.Elevator;
import frc.robot.subsystems.IndexerPivot;
import frc.robot.subsystems.IndexerRollers;
import frc.robot.subsystems.Intake;
import frc.robot.subsystems.Shooter;
import frc.robot.subsystems.SwerveDrive;
import frc.robot.subsystems.SwerveModule;
import frc.robot.subsystems.Gyro.Gyro;
import frc.robot.subsystems.Gyro.GyroIOPigeon;
import lib.BlueShift.control.CustomController;
import lib.BlueShift.control.SpeedAlterator;
import lib.BlueShift.control.CustomController.CustomControllerType;
import edu.wpi.first.math.VecBuilder;
import edu.wpi.first.math.estimator.SwerveDrivePoseEstimator;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.wpilibj.smartdashboard.Field2d;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.ParallelCommandGroup;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj2.command.WaitCommand;

public class RobotContainer {
  // * Controller
  private final CustomController m_controller = new CustomController(0, CustomControllerType.XBOX);
  
  // * Gyro
  private final Gyro m_gyro;
  
  // * Swerve Modules
  private final SwerveModule m_frontLeft;
  private final SwerveModule m_frontRight;
  private final SwerveModule m_backLeft;
  private final SwerveModule m_backRight;
  
  // * Swerve Drive
  private final SwerveDrive m_swerveDrive;
  private final SpeedAlterator alignToSpeakerAlterator;  
  // * BeamBreaks
  
  // * Intake
  private final Intake m_intake;

  // * Elevator
  private final Elevator m_elevator;

  // * Shooter
  private final Shooter m_shooter;

  // * Indexer Pivot
  private final IndexerPivot m_indexerPivot;

  // * Indexer Rollers
  private final IndexerRollers m_indexerRollers;

  //* Climbers
  // private final Climber m_leftClimber;
  // private final Climber m_rightClimber;

  // * Odometry
  SwerveDrivePoseEstimator m_poseEstimator;
  Field2d m_field = new Field2d();

  public RobotContainer() {
    // Gyro
    this.m_gyro = new Gyro(new GyroIOPigeon(Constants.SwerveDrive.kGyroDevice));

    // Swerve Modules
    this.m_frontLeft = new SwerveModule(Constants.SwerveDrive.SwerveModules.kFrontLeftOptions);
    this.m_frontRight = new SwerveModule(Constants.SwerveDrive.SwerveModules.kFrontRightOptions);
    this.m_backLeft = new SwerveModule(Constants.SwerveDrive.SwerveModules.kBackLeftOptions);
    this.m_backRight = new SwerveModule(Constants.SwerveDrive.SwerveModules.kBackRightOptions);

    // Swerve Drive
    this.m_swerveDrive = new SwerveDrive(m_frontLeft, m_frontRight, m_backLeft, m_backRight, m_gyro);

    // BeamBreaks

    // Intake
    this.m_intake = new Intake();

    // Elevator
    this.m_elevator = new Elevator();

    // Shooter
    this.m_shooter = new Shooter();

    // Indexer Pivot
    this.m_indexerPivot = new IndexerPivot();

    // Indexer Rollers
    this.m_indexerRollers = new IndexerRollers();

    // Climbers
    // this.m_leftClimber = new Climber("LeftClimber", Constants.Climber.kLeftClimberMotorID);
    // this.m_rightClimber = new Climber("RightClimber", Constants.Climber.kRightClimberMotorID);

    // Vision
    LimelightHelpers.setPipelineIndex(Constants.Vision.Limelight3G.kName, Constants.Vision.Limelight3G.kOdometryPipeline);
    LimelightHelpers.setPipelineIndex(Constants.Vision.Limelight3.kName, Constants.Vision.Limelight3.kNotePipeline);
    m_poseEstimator = new SwerveDrivePoseEstimator(
      Constants.SwerveDrive.PhysicalModel.kDriveKinematics,
      m_swerveDrive.getHeading(),
      m_swerveDrive.getModulePositions(),
      new Pose2d()
    );
    this.alignToSpeakerAlterator = new AlignToSpeaker(m_poseEstimator::getEstimatedPosition);

    // Dashboard Commands
    // Drivetrain
    SmartDashboard.putData("Commands/Drivetrain/DrivetrainZeroHeading", new InstantCommand(m_swerveDrive::zeroHeading));
    SmartDashboard.putData("Commands/Drivetrain/DrivetrainResetEncoders", new InstantCommand(m_swerveDrive::resetTurningEncoders));

    // BeamBreaks

    // Climbers
    // SmartDashboard.putData("Commands/Climbers/SetClimbersLow", ClimberCommands.setClimbersLowCommand(m_leftClimber, m_rightClimber));
    // SmartDashboard.putData("Commands/Climbers/SetClimbersHigh", ClimberCommands.setClimbersHighCommand(m_leftClimber, m_rightClimber));

    // Elevator

    // IndexerPivot
    SmartDashboard.putNumber("Commands/IndexerPivot/IndexerSetpoint", 0);

    // IndexerRollers
    SmartDashboard.putData("Commands/IndexerRollers/IndexerRollersIn", m_indexerRollers.setRollersInCommand());
    SmartDashboard.putData("Commands/IndexerRollers/IndexerRollersOut", m_indexerRollers.setRollersOutCommand());
    SmartDashboard.putData("Commands/IndexerRollers/IndexerRollersStop", m_indexerRollers.stopRollersCommand());

    // Intake
    SmartDashboard.putData("Commands/Intake/IntakeIn", m_intake.setInCommand());
    SmartDashboard.putData("Commands/Intake/IntakeOut", m_intake.setOutCommand());
    SmartDashboard.putData("Commands/Intake/IntakeAvoid", m_intake.setAvoidCommand());

    // Shooter
    // SmartDashboard.putNumber("Commands/Shooter/ShooterSpeed", 140);
    // SmartDashboard.putData("Commands/Shooter/SetSetpoint", m_shooter.setRpmCommand(RPM.of(SmartDashboard.getNumber("Commands/Shooter/ShooterSpeed", 140))));

    configureBindings();
  }

  private void configureBindings() {
    // * Drivetrain
    this.m_swerveDrive.setDefaultCommand(new DriveSwerve(
        m_swerveDrive,
        () -> -m_controller.getLeftY(),
        () -> -m_controller.getLeftX(),
        () -> -m_controller.getRightX(),
        () -> true,
        () -> false
      )
    );

    this.m_controller.rightStickButton().onTrue(new InstantCommand(() -> m_swerveDrive.zeroHeading()));

    this.m_controller.rightBumper().onTrue(m_swerveDrive.enableSpeedAlteratorCommand(alignToSpeakerAlterator));
    this.m_controller.rightBumper().onFalse(m_swerveDrive.disableSpeedAlteratorCommand());
    
    // * Default control
    this.m_controller.bottomButton().toggleOnTrue(new SequentialCommandGroup(
         m_indexerPivot.setSetpointCommand(Constants.Indexer.Pivot.receiving),
         m_shooter.setIdleCommand(),
         m_elevator.setPositionCommand(0),
        // Set elevator
        new ParallelCommandGroup(
          m_intake.setInCommand(),
          m_indexerRollers.setRollersInCommand()
        ).until(() -> m_indexerRollers.getBeamBreak()),
        //new WaitCommand(0.25),
        new ParallelCommandGroup(
          m_intake.setStopCommand(),
          m_indexerRollers.stopRollersCommand()
        )
      
    )).onFalse(
      new ParallelCommandGroup(
            m_intake.setStopCommand(),
            m_indexerRollers.stopRollersCommand()
          )
    );

    // !DISABLE BEAM BREAK MOMENTARILY COMMAND
    this.m_controller.leftBumper().whileTrue(m_indexerRollers.setBeamBreakEnabledCommand(false))
    .onFalse(m_indexerRollers.setBeamBreakEnabledCommand(true));

    this.m_controller.topButton().whileTrue(new SequentialCommandGroup(
         m_indexerPivot.setSetpointCommand(Constants.Indexer.Pivot.receiving),
        // Set elevator
        new ParallelCommandGroup(
          m_intake.setOutCommand(),
          m_indexerRollers.setRollersOutCommand()
        )
    )).onFalse(
      new ParallelCommandGroup(
            m_intake.setStopCommand(),
            m_indexerRollers.stopRollersCommand()
          )
    );

    this.m_controller.rightTrigger().whileTrue(new SequentialCommandGroup(
      new ParallelCommandGroup(
        m_indexerPivot.setSetpointCommand(Constants.Indexer.Pivot.shoot),
        m_shooter.setShootCommand()
        )
    )).onFalse(new SequentialCommandGroup(
      m_indexerRollers.setRollersPassCommand(),

        new WaitCommand(1.2),

        new ParallelCommandGroup(
          m_shooter.setIdleCommand(),
          m_indexerRollers.stopRollersCommand()
        )
    ));

    /* this.m_controller.rightTrigger().whileTrue(new SequentialCommandGroup(
      new ParallelCommandGroup(
        m_indexerPivot.setSetpointCommand(Constants.Indexer.Pivot.shoot),
        m_shooter.setVelocityCommand(0.9, 0.3)
        )
    )).onFalse(new SequentialCommandGroup(
      m_indexerRollers.setRollersPassCommand(),

        new WaitCommand(1.2),

        new ParallelCommandGroup(
          m_shooter.stopCommand(),
          m_indexerRollers.stopRollersCommand()
        )
    )); */

    this.m_controller.leftTrigger().whileTrue(new SequentialCommandGroup(
      new ParallelCommandGroup(
        m_indexerPivot.setSetpointCommand(Constants.Indexer.Pivot.horizontal),
        m_shooter.setPassCommand()
        )
    )).onFalse(new SequentialCommandGroup(
      m_indexerRollers.setRollersPassCommand(),

        new WaitCommand(1.2),

        new ParallelCommandGroup(
          m_shooter.setIdleCommand(),
          m_indexerRollers.stopRollersCommand()
        )
    ));
    
    /* m_controller.povLeft().onTrue(new SequentialCommandGroup(
      m_indexerPivot.setSetpointCommand(Constants.Indexer.Pivot.recieving),
      m_elevator.setPositionCommand(5)
    )); */

    /* this.m_controller.rightBumper().whileTrue(new SequentialCommandGroup(
      m_elevator.setPositionCommand(0) // ! SET TO TOP
      .until(() -> m_elevator.atSetpoint()),
      m_indexerRollers.setRollersOutCommand()
    )).onFalse(
      new ParallelCommandGroup(
        m_elevator.setPositionCommand(0),
        m_indexerRollers.stopRollersCommand()
      )
    );

    //! BUMOPER BOUND TO SOM3ETHING ELSE
    this.m_controller.leftBumper().whileTrue(new SequentialCommandGroup(
      new ParallelCommandGroup(
        m_indexerPivot.setSetpointCommand(Constants.Indexer.Pivot.recieving),
        m_shooter.setVelocityCommand(0.9),
        m_elevator.setPositionCommand(0) // ! SET TO TOP
        )
    )).onFalse(new SequentialCommandGroup(
      m_indexerRollers.setRollersPassCommand(),

        new WaitCommand(1.2),

        new ParallelCommandGroup(
          m_shooter.stopCommand(),
          m_indexerRollers.stopRollersCommand(),
          m_elevator.setPositionCommand(0)
        )
    )); */

    this.m_controller.povUp().onTrue(m_elevator.setPositionCommand(55));
    this.m_controller.povDown().onTrue(m_elevator.setPositionCommand(0));

    this.m_controller.povRight().whileTrue(new SequentialCommandGroup(
      m_elevator.setPositionCommand(55).until(m_elevator::atSetpoint),
      m_indexerPivot.setSetpointCommand(0).until(m_indexerPivot::atSetpoint)
    )).onFalse(m_elevator.setPositionCommand(0));

    this.m_controller.leftButton().whileTrue(m_indexerRollers.setRollersOutCommand())
    .onFalse(m_indexerRollers.stopRollersCommand());

    /* this.m_controller.topButton().onTrue(new SequentialCommandGroup(
      new ParallelCommandGroup(
        m_elevator.setPositionCommand(ElevatorPosition.LOW),
        m_indexerPivot.setSetpointCommand(Constants.Indexer.Pivot.recieving)
      ),
      m_intake.setOutCommand(),
      m_indexerRollers.setRollersOutCommand(),
      new WaitCommand(0.25),
      m_indexerRollers.stopRollersCommand()
    )); */

    /* this.m_controller.leftTrigger().whileTrue(new ParallelCommandGroup(
      m_elevator.setPositionCommand(ElevatorPosition.LOW),
      m_indexerPivot.setSetpointCommand(
        
          Constants.Shooter.kIndexerAngle.getInterpolatedValue(
            Constants.Field.getCurrentSpeaker().toPose2d().minus(m_poseEstimator.getEstimatedPosition()).getTranslation().getNorm()
          )

      ),
      m_shooter.setRpmCommand(RPM.of(
        Constants.Shooter.kShooterSpeed.getInterpolatedValue(
            Constants.Field.getCurrentSpeaker().toPose2d().minus(m_poseEstimator.getEstimatedPosition()).getTranslation().getNorm()
          )
        )
      )
    )); */

    // this.m_controller.rightTrigger().whileTrue(m_indexerRollers.setRollersPassCommand());
    
    // this.m_controller.bottomButton().toggleOnTrue(m_intake.setInCommand());

    // * Intake
    //this.m_intake.setDefaultCommand(m_intake.setAvoidCommand());

  }

  public Command getAutonomousCommand() {
    return new SequentialCommandGroup(
      new ParallelCommandGroup(
        m_indexerPivot.setSetpointCommand(Constants.Indexer.Pivot.shoot),
        m_shooter.setVelocityCommand(0.8, 0.9)
        ),

        new WaitCommand(2),

        m_indexerRollers.setRollersPassCommand(),

        new WaitCommand(1),

        new ParallelCommandGroup(
          m_shooter.setIdleCommand(),
          m_indexerRollers.stopRollersCommand()
        )
    );
  }

  public Command getTeleopCommand() {
    return new ParallelCommandGroup(
      m_elevator.resetPIDCommand(),
      m_indexerPivot.resetPIDCommand()
    );
  }

  public void periodic() {
    // Update limelights gyroscope
    LimelightHelpers.SetRobotOrientation(Constants.Vision.Limelight3G.kName, m_gyro.getHeading().getDegrees(), 0, 0, 0, 0, 0);
    LimelightHelpers.SetRobotOrientation(Constants.Vision.Limelight3.kName, m_gyro.getHeading().getDegrees(), 0, 0, 0, 0, 0);

  }
}



